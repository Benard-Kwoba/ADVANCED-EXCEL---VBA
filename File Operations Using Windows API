' This VBA script demonstrates how to use Windows API functions to perform file operations
' such as creating, writing, and reading a file. Additionally, it retrieves the current system
' time and displays it in a message box.

' _____________________________________________________ Declare API functions for file operations and system time _______________________________________________________________________________
Private Declare PtrSafe Function CreateFile Lib "kernel32" _
    Alias "CreateFileA" (ByVal lpFileName As String, ByVal dwDesiredAccess As Long, _
    ByVal dwShareMode As Long, ByVal lpSecurityAttributes As LongPtr, ByVal dwCreationDisposition As Long, _
    ByVal dwFlagsAndAttributes As Long, ByVal hTemplateFile As LongPtr) As LongPtr

Private Declare PtrSafe Function WriteFile Lib "kernel32" _
    (ByVal hFile As LongPtr, ByRef lpBuffer As Byte, ByVal nNumberOfBytesToWrite As Long, _
    ByRef lpNumberOfBytesWritten As Long, ByVal lpOverlapped As LongPtr) As Long

Private Declare PtrSafe Function ReadFile Lib "kernel32" _
    (ByVal hFile As LongPtr, ByRef lpBuffer As Byte, ByVal nNumberOfBytesToRead As Long, _
    ByRef lpNumberOfBytesRead As Long, ByVal lpOverlapped As LongPtr) As Long

Private Declare PtrSafe Function CloseHandle Lib "kernel32" (ByVal hObject As LongPtr) As Long

Private Declare PtrSafe Sub GetSystemTime Lib "kernel32" (ByRef st As systemTime)

Private Declare PtrSafe Function MessageBox Lib "user32" _
    Alias "MessageBoxA" (ByVal hWnd As LongPtr, ByVal lpText As String, ByVal lpCaption As String, ByVal uType As Long) As Long

' Define a structure to hold system time information
Private Type systemTime
    wYear As Integer
    wMonth As Integer
    wDayOfWeek As Integer
    wDay As Integer
    wHour As Integer
    wMinute As Integer
    wSecond As Integer
    wMilliseconds As Integer
End Type

' _____________________________________________________ APIExample subroutine for file creation, writing, reading, and system time retrieval ______________________________________________________________
Sub APIExample()
    ' Define a string variable to hold the file path
    Dim filePath As String
    
    ' Define a variable to hold the file handle returned by CreateFile
    Dim hFile As LongPtr ' LongPtr is a VBA data type used for handling pointers and handles in a way that is compatible with both 32-bit and 64-bit systems.
    
    ' Define variables to store the number of bytes written and read
    Dim bytesWritten As Long
    Dim bytesRead As Long
    
    ' Define the number of bytes to read and dynamically allocate a buffer for reading and writing
    Dim numBytesToRead As Long
    numBytesToRead = 256
    Dim buffer() As Byte
    ReDim buffer(0 To numBytesToRead - 1) ' Dynamically allocate the buffer array
    
    ' Define a variable to hold system time information
    Dim systemTime As systemTime
    
    ' Define a variable to hold the result of the MessageBox function
    Dim result As Long
    
    ' Set the path where the file will be created
    filePath = "C:\Users\OtienBer\Desktop\vbaexample.txt"
    
    ' Call CreateFile function to create or open the file
    ' &H40000000 specifies GENERIC_WRITE access
    ' 0 for shared mode (no sharing)
    ' 0 for default security attributes
    ' 2 to create the file if it does not exist
    ' 0 for no special file attributes
    ' 0 for no template file
    hFile = CreateFile(filePath, &H40000000, 0, 0, 2, 0, 0)
    
    ' Check if CreateFile returned 0, indicating failure
    If hFile = 0 Then
        ' Show a message box indicating that file creation failed
        MessageBox 0, "Failed to create file", "Error", 0
        ' Exit the subroutine since the file was not created successfully
        Exit Sub
    End If
    
    ' Convert the string "Hello, World!" to a byte array
    Dim textToWrite As String
    textToWrite = "Hello, World!"
    Dim bytesToWrite() As Byte
    bytesToWrite = StrConv(textToWrite, vbFromUnicode)
    
    ' Call WriteFile function to write data to the file
    If WriteFile(hFile, bytesToWrite(0), UBound(bytesToWrite) + 1, bytesWritten, 0) = 0 Then
        ' Show a message box indicating that writing to the file failed
        MessageBox 0, "Failed to write to file", "Error", 0
        ' Close the file handle before exiting
        CloseHandle hFile
        ' Exit the subroutine since writing failed
        Exit Sub
    End If
    
    ' Close the file handle to release the file
    CloseHandle hFile
    
    ' Reopen the file for reading
    hFile = CreateFile(filePath, &H80000000, 0, 0, 3, 0, 0)
    
    ' Check if CreateFile returned 0, indicating failure
    If hFile = 0 Then
        ' Show a message box indicating that file opening for reading failed
        MessageBox 0, "Failed to open file for reading", "Error", 0
        ' Exit the subroutine since the file was not opened successfully
        Exit Sub
    End If
    
    ' Call ReadFile function to read data from the file
    If ReadFile(hFile, buffer(0), numBytesToRead, bytesRead, 0) = 0 Then
        ' Show a message box indicating that reading from the file failed
        MessageBox 0, "Failed to read from file", "Error", 0
        ' Close the file handle before exiting
        CloseHandle hFile
        ' Exit the subroutine since reading failed
        Exit Sub
    End If
    
    ' Close the file handle to release the file
    CloseHandle hFile
    
    ' Convert the buffer to a string for display
    Dim textRead As String
    textRead = StrConv(buffer, vbUnicode)
    
    ' Trim the string to remove any extra characters
    textRead = Left(textRead, InStr(textRead, Chr(0)) - 1)
    
    ' Call GetSystemTime function to retrieve the current system time
    GetSystemTime systemTime
    
    ' Create a message string to display the system time and file content
    Dim timeMessage As String
    timeMessage = "Current System Time:" & vbCrLf & _
                  "Year: " & systemTime.wYear & vbCrLf & _
                  "Month: " & systemTime.wMonth & vbCrLf & _
                  "Day: " & systemTime.wDay & vbCrLf & _
                  "Hour: " & systemTime.wHour & vbCrLf & _
                  "Minute: " & systemTime.wMinute & vbCrLf & _
                  "Second: " & systemTime.wSecond & vbCrLf & vbCrLf & _
                  "File Content:" & vbCrLf & textRead
    
    ' Call MessageBox function to display the system time and file content
    result = MessageBox(0, timeMessage, "System Time and File Content", 0)
    
End Sub


